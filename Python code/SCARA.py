import numpy as np
LANG="en_US.UTF-8"

def keep_in_range(val,min_val,max_val):
    return min(max_val,max(min_val,val))
def round_T(T,f): # this is a function used for rounding the 4x4 matrix by value f
    T[0,0]=round(T[0,0],f)
    T[0,1]=round(T[0,1],f)
    T[0,2]=round(T[0,2],f)
    T[0,3]=round(T[0,3],f)
    
    T[1,0]=round(T[1,0],f)
    T[1,1]=round(T[1,1],f)
    T[1,2]=round(T[1,2],f)
    T[1,3]=round(T[1,3],f)
    
    T[2,0]=round(T[2,0],f)
    T[2,1]=round(T[2,1],f)
    T[2,2]=round(T[2,2],f)
    T[2,3]=round(T[2,3],f)
    
    T[3,0]=round(T[3,0],f)
    T[3,1]=round(T[3,1],f)
    T[3,2]=round(T[3,2],f)
    T[3,3]=round(T[3,3],f)
    
    return (T)
# constants in meters "from tha datasheet of the THP700 type"
L1=0.35;
L2=0.3; 
d1=0.16;
d4=0.16;
#constrains on the range, all are +ve or -ve, in degrees and meters
rangeAxis1=148;
rangeAxis2=150;
rangeAxis3=0.21;
rangeAxis4=720;
########################################################################################
z1=float(input ("Please,enter the angle\"in degrees\" rotated by the first R-joint : "))  #short for theta1
z1=keep_in_range(z1,-rangeAxis1,rangeAxis1);
A1=np.matrix([[round(np.cos(z1*np.pi/180),5),round(-1*np.sin(z1*np.pi/180),5),0,round(L1*np.cos(z1*np.pi/180),5)],
              [round(np.sin(z1*np.pi/180),5),round(np.cos(z1*np.pi/180),5),0,round(L1*np.sin(z1*np.pi/180),5)],
              [0,0,1,d1],
              [0,0,0,1]])

print(A1)
########################################################################################
z2=float(input ("Please,enter the angle\"in degrees\" rotated by the second R-joint : "))  #short for theta2
z2=keep_in_range(z2,-rangeAxis2,rangeAxis2);
A2=np.matrix([[round(np.cos(z2*np.pi/180),5),round(np.sin(z2*np.pi/180),5),0,round(L2*np.cos(z2*np.pi/180),5)],
              [round(np.sin(z2*np.pi/180),5),round(-1*np.cos(z2*np.pi/180),5),0,round(L2*np.sin(z2*np.pi/180),5)],
              [0,0,-1,0],
              [0,0,0,1]])

print(A2)
########################################################################################
d3=float(input ("Please,enter the distance\"in meters\" traveled by the P-joint : "))
d3=keep_in_range(d3,-rangeAxis3,rangeAxis3);
A3=np.matrix([[1, 0, 0,0 ],
              [0, 1, 0,0 ],
              [0, 0, 1,d3],
              [0, 0, 0,1]])

print(A3)
########################################################################################
z4=float(input ("Please,enter the angle\"in degrees\" rotated by the third R-joint : "))  #short for theta4
z4=keep_in_range(z4,-rangeAxis4,rangeAxis4);
A4=np.matrix([[round(np.cos(z4*np.pi/180),5),round(-1*np.sin(z4*np.pi/180),5),0,0],
              [round(np.sin(z4*np.pi/180),5),round(np.cos(z4*np.pi/180),5),0,0],
              [0,0,1,d4],
              [0,0,0,1]])

print(A4)
########################################################################################
T_byHand=np.matrix([[round(np.cos((z1+z2-z4)*np.pi/180),5),round(np.sin((z1+z2-z4)*np.pi/180),5),0,round(L1*np.cos(z1*np.pi/180)+L2*np.cos((z1+z2)*np.pi/180),5)],
                    [round(np.sin((z1+z2-z4)*np.pi/180),5),round(-1*np.cos((z1+z2-z4)*np.pi/180),5),0,round(L1*np.sin(z1*np.pi/180)+L2*np.sin((z1+z2)*np.pi/180),5)],
                    [0,0,-1,d1-d3-d4],
                    [0,0,0,1]])

#this matrix was calculated by hand !
########################################################################################
# if the matrix calculated by hand was equal to the function generated by multi. the use it ,else don't
T=np.dot(np.dot(A1,A2),np.dot(A3,A4))
if T.all()==T_byHand.all():
    T=T_byHand;
    print ("was equal")
else:
    T=round_T(T,5);
    print ("was not equal")
# the previous lines between the # was only written for test purposes , if you was sure that the matrix written by hand 
# is correct then,  you can remove the multi. line ->T=np.dot(np.dot(A1,A2),np.dot(A3,A4)) and uncomment the following line
#T=T_byHand; # uncomment this to use the matrix calculated by hand
########################################################################################   

if not T.all(): # chaek that the matrix is a non-zero matrix !
    print(T)
    n=np.array([T[0,0],T[0,1],T[0,2]])
    s=np.array([T[1,0],T[1,1],T[1,2]])
    a=np.array([T[2,0],T[2,1],T[2,2]])
    d=np.array([T[0,3],T[1,3],T[2,3]])

    print("################################For the SCARA robot#################################")
    print ("position of the end-effector : ")
    print(np.transpose(d))
    print ("Orientation of the end-effector : ")
    print ("1)direction of tha x-axis of the end-effector relative to the base : ")
    print(np.transpose(n))
    print ("2)direction of tha y-axis of the end-effector relative to the base : ")
    print(np.transpose(s))
    print ("3)direction of tha z-axis of the end-effector relative to the base : ")
    print(np.transpose(a))
else:
    print("invalid input!!!")
